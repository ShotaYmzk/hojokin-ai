/* tslint:disable */
/* eslint-disable */
/**
 * Subsidy Automation API
 * API for the 補助金AI platform. Covers authentication, company profiles, subsidy search & matching, AI‐generated document drafts, application submission, and progress tracking. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Application,
  ApplicationCreateRequest,
  ApplicationUpdateRequest,
} from '../models/index';
import {
    ApplicationFromJSON,
    ApplicationToJSON,
    ApplicationCreateRequestFromJSON,
    ApplicationCreateRequestToJSON,
    ApplicationUpdateRequestFromJSON,
    ApplicationUpdateRequestToJSON,
} from '../models/index';

export interface ApplicationsIdGetRequest {
    id: string;
}

export interface ApplicationsIdPutRequest {
    id: string;
    applicationUpdateRequest: ApplicationUpdateRequest;
}

export interface ApplicationsPostRequest {
    applicationCreateRequest: ApplicationCreateRequest;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * List applications for current user
     */
    async applicationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Application>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationFromJSON));
    }

    /**
     * List applications for current user
     */
    async applicationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Application>> {
        const response = await this.applicationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get application details
     */
    async applicationsIdGetRaw(requestParameters: ApplicationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applicationsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Get application details
     */
    async applicationsIdGet(requestParameters: ApplicationsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update application (e.g., status/progress)
     */
    async applicationsIdPutRaw(requestParameters: ApplicationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applicationsIdPut().'
            );
        }

        if (requestParameters['applicationUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationUpdateRequest',
                'Required parameter "applicationUpdateRequest" was null or undefined when calling applicationsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationUpdateRequestToJSON(requestParameters['applicationUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Update application (e.g., status/progress)
     */
    async applicationsIdPut(requestParameters: ApplicationsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit new application
     */
    async applicationsPostRaw(requestParameters: ApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters['applicationCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'applicationCreateRequest',
                'Required parameter "applicationCreateRequest" was null or undefined when calling applicationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationCreateRequestToJSON(requestParameters['applicationCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Submit new application
     */
    async applicationsPost(requestParameters: ApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.applicationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Subsidy Automation API
 * API for the 補助金AI platform. Covers authentication, company profiles, subsidy search & matching, AI‐generated document drafts, application submission, and progress tracking.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CompanyProfile,
  Subsidy,
  SubsidyMatch,
  SubsidySearchResponse,
} from "../models/index";
import {
  CompanyProfileFromJSON,
  CompanyProfileToJSON,
  SubsidyFromJSON,
  SubsidyToJSON,
  SubsidyMatchFromJSON,
  SubsidyMatchToJSON,
  SubsidySearchResponseFromJSON,
  SubsidySearchResponseToJSON,
} from "../models/index";

export interface SubsidiesGetRequest {
  keyword?: string;
  industry?: string;
  region?: string;
  purpose?: Array<string>;
  minAmount?: number;
  page?: number;
  limit?: number;
}

export interface SubsidiesIdGetRequest {
  id: string;
}

export interface SubsidiesMatchPostRequest {
  companyProfile: CompanyProfile;
}

/**
 *
 */
export class SubsidiesApi extends runtime.BaseAPI {
  /**
   * Search subsidies
   */
  async subsidiesGetRaw(
    requestParameters: SubsidiesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SubsidySearchResponse>> {
    const queryParameters: any = {};

    if (requestParameters["keyword"] != null) {
      queryParameters["keyword"] = requestParameters["keyword"];
    }

    if (requestParameters["industry"] != null) {
      queryParameters["industry"] = requestParameters["industry"];
    }

    if (requestParameters["region"] != null) {
      queryParameters["region"] = requestParameters["region"];
    }

    if (requestParameters["purpose"] != null) {
      queryParameters["purpose"] = requestParameters["purpose"];
    }

    if (requestParameters["minAmount"] != null) {
      queryParameters["minAmount"] = requestParameters["minAmount"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/subsidies`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubsidySearchResponseFromJSON(jsonValue),
    );
  }

  /**
   * Search subsidies
   */
  async subsidiesGet(
    requestParameters: SubsidiesGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SubsidySearchResponse> {
    const response = await this.subsidiesGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get subsidy details
   */
  async subsidiesIdGetRaw(
    requestParameters: SubsidiesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Subsidy>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling subsidiesIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/subsidies/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SubsidyFromJSON(jsonValue),
    );
  }

  /**
   * Get subsidy details
   */
  async subsidiesIdGet(
    requestParameters: SubsidiesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Subsidy> {
    const response = await this.subsidiesIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Match company profile against subsidies
   */
  async subsidiesMatchPostRaw(
    requestParameters: SubsidiesMatchPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<SubsidyMatch>>> {
    if (requestParameters["companyProfile"] == null) {
      throw new runtime.RequiredError(
        "companyProfile",
        'Required parameter "companyProfile" was null or undefined when calling subsidiesMatchPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("bearerAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/subsidies/match`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CompanyProfileToJSON(requestParameters["companyProfile"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SubsidyMatchFromJSON),
    );
  }

  /**
   * Match company profile against subsidies
   */
  async subsidiesMatchPost(
    requestParameters: SubsidiesMatchPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<SubsidyMatch>> {
    const response = await this.subsidiesMatchPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
